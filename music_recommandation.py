# -*- coding: utf-8 -*-
"""music recommandation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oUva2sT-spjQdYPSQCtCoolog-cSNqA6
"""

import pandas as pd
import numpy as np

df = pd.read_csv('data_by_genres.csv')
df



df = pd.read_csv('data_by_year.csv')
df

d1 = pd.DataFrame(
    {"key":["genres","energy","danceability","duration_ms","instrumentalness",
            "speechiness","tempo","popularity","key"],
    "num1":range(9)})

d2 = pd.DataFrame(
    {"key":["year","energy","danceability","duration_ms","instrumentalness",
            "speechiness","tempo","popularity","key"],
    "num2":range(9)})
df

print(d1)
print(d2)

pd.merge(d1,d2)

pd.merge(d1,d2,on="key")

d3 = pd.DataFrame(
    {"key1":["genres","energy","danceability","duration_ms","instrumentalness",
            "speechiness","tempo","popularity","key"],
    "num1":range(9)})

d4 = pd.DataFrame(
    {"key2":["year","energy","danceability","duration_ms","instrumentalness",
            "speechiness","tempo","popularity"],
    "num2":range(8)})

pd.merge(d3,d4,left_on="key1",right_on="key2")

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import pandas as pd

import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
from sklearn.metrics import euclidean_distances
from scipy.spatial.distance import cdist

import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv("data.csv")
genre_data = pd.read_csv('data_by_genres.csv')
year_data = pd.read_csv('data_by_year.csv')

print(data.info())

print(genre_data.info())

print(year_data.info())

def get_decade(year):
    period_start = int(year/10) * 10
    decade = '{}s'.format(period_start)
    return decade

data['decade'] = data['year'].apply(get_decade)

sns.set(rc={'figure.figsize':(11 ,6)})
sns.countplot(data['decade'])

sound_features = ['acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'valence']
fig = px.line(year_data, x='year', y=sound_features)
fig.show()

top10_genres = genre_data.nlargest(10, 'popularity')

fig = px.bar(top10_genres, x='genres', y=['valence', 'energy', 'danceability', 'acousticness'], barmode='group')
fig.show()

import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

cluster_pipeline = Pipeline([('scaler', StandardScaler()), ('kmeans', KMeans(n_clusters=10))])
X = genre_data.select_dtypes(np.number)
cluster_pipeline.fit(X)
genre_data['cluster'] = cluster_pipeline.predict(X)

# Visualizing the Clusters with t-SNE

from sklearn.manifold import TSNE

tsne_pipeline = Pipeline([('scaler', StandardScaler()), ('tsne', TSNE(n_components=2, verbose=1))])
genre_embedding = tsne_pipeline.fit_transform(X)
projection = pd.DataFrame(columns=['x', 'y'], data=genre_embedding)
projection['genres'] = genre_data['genres']
projection['cluster'] = genre_data['cluster']

fig = px.scatter(
    projection, x='x', y='y', color='cluster', hover_data=['x', 'y', 'genres'])
fig.show()

song_cluster_pipeline = Pipeline([('scaler', StandardScaler()),
                                  ('kmeans', KMeans(n_clusters=20, verbose=False))],
                                 verbose=False)

# Remove rows with NaN values
data_clean = data.dropna()

X = data_clean.select_dtypes(np.number)
song_cluster_pipeline.fit(X)
song_cluster_labels = song_cluster_pipeline.predict(X)
data_clean['cluster_label'] = song_cluster_labels

# Visualizing the Clusters with PCA
import plotly.express as px
from sklearn.decomposition import PCA

pca_pipeline = Pipeline([('scaler', StandardScaler()), ('PCA', PCA(n_components=2))])
song_embedding = pca_pipeline.fit_transform(X)
projection = pd.DataFrame(columns=['x', 'y'], data=song_embedding)
projection['title'] = data_clean['name']  # Use data_clean instead of data
projection['cluster'] = data_clean['cluster_label']  # Use data_clean instead of data

fig = px.scatter(
    projection, x='x', y='y', color='cluster', hover_data=['x', 'y', 'title'])
fig.show()

